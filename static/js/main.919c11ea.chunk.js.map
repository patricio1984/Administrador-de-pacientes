{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.919c11ea.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport uuid from \"uuid/dist/v4\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    //Crear State de Citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: \"\",\r\n        propietario: \"\",\r\n        fecha: \"\",\r\n        hora: \"\",\r\n        sintomas: \"\"\r\n    });\r\n\r\n    const [ error, actualizarError ] = useState(false)\r\n\r\n    //Función que se ejecuta cada vez que el usuario escribe en un input\r\n    const actualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    //Extraer los valores\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n    //Cuando el usuario presiona agregar cita\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n        //Validar\r\n        if(mascota.trim() === \"\" || propietario.trim() === \"\" || fecha.trim() === \"\" || hora.trim() === \"\" || sintomas.trim() === \"\") {\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n        // Eliminar el mensaje previo\r\n        actualizarError(false);\r\n\r\n        //Asignar un ID\r\n        cita.id = uuid();\r\n\r\n        //Crear la cita\r\n        crearCita(cita)\r\n\r\n        //Reiniciar el form\r\n        actualizarCita({\r\n            mascota: \"\",\r\n            propietario: \"\",\r\n            fecha: \"\",\r\n            hora: \"\",\r\n            sintomas: \"\"\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <>\r\n            <h2>Crear Cita</h2>\r\n\r\n            { error ?  <p className=\"alerta-error\">Todos los campos son obligatorios</p>  : null}\r\n            \r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota}\r\n                />\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño de la Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n                >\r\n\r\n                </textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar Cita</button>\r\n            </form>\r\n        </>\r\n     );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cita = ({cita, eliminarCita}) => ( \r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Dueño: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Síntomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={() => eliminarCita(cita.id)}\r\n        >Eliminar &times;</button>\r\n    </div>\r\n );\r\n\r\n Cita.propTypes = {\r\n     cita: PropTypes.object.isRequired,\r\n     eliminarCita: PropTypes.func.isRequired\r\n }\r\n \r\nexport default Cita;","import React, {useState, useEffect} from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\n\n\nfunction App() {\n\n\n  //Citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if(!citasIniciales) {\n    citasIniciales = []\n  }\n  //Array de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //Use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n    \n    if(citasIniciales){\n      localStorage.setItem(\"citas\", JSON.stringify(citas))\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    };\n  }, [citas]);\n\n  //Función que tome las citas actuales y agregue la nueva\n  const crearCita = cita => {\n     guardarCitas([\n       ...citas,\n       cita\n     ]);\n  }\n\n  //Función que elimina una cita por su id\n  const eliminarCita = id => {\n      const nuevasCitas = citas.filter(cita => cita.id !== id)\n      guardarCitas(nuevasCitas)\n  }\n\n  //Mensaje condicional\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administra tus Citas\"\n\n  return (\n    <>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n          <div className=\"row\">\n              <div className=\"one-half column\">\n                <Formulario\n                  crearCita={crearCita}\n                />\n              </div>\n              <div className=\"one-half column\">\n                  <h2>{titulo}</h2>\n                  {citas.map(cita => (\n                    <Cita\n                      key={cita.id} \n                      cita={cita}\n                      eliminarCita={eliminarCita}\n                    />\n                  ))}\n              </div>\n          </div>  \n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}